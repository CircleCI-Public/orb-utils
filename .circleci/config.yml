version: 2.1

filters: &filters
  tags:
    only: /.*/

orbs:
  shellcheck: circleci/shellcheck@3
  bats: circleci/bats@1
  gh: circleci/github-cli@2.1

executors:
  cimg:
    docker:
      - image: cimg/base:stable
  mac:
    macos:
      xcode: 14.1.0
  alpine:
    docker:
      - image: alpine:latest
  windows:
    machine:
      image: windows-server-2022-gui:current
      resource_class: windows.medium
      shell: bash.exe
  ubuntu:
    machine:
      image: ubuntu-2204:current

commands:
  resolve-release-script:
    description: "Resolve the file to upload to the GitHub Release."
    steps:
      - run:
          name: Resolve release script
          command: |
            # Get script name from tag.
            # See more: regexr.com/74m6k
            script_name="$(printf '%s' "$CIRCLE_TAG" | sed -E 's/(.*)_v[0-9]+.[0-9]+.[0-9]+/\1/')"
            [ -z "$script_name" ] && { printf '%s\n' "Failed to get the script name from tag."; exit 1; }

            readonly base_dir="${CIRCLE_WORKING_DIRECTORY/\~/$HOME}"
            readonly script="$base_dir/$script_name.sh"
            printf '%s\n' "export SCRIPT=$script" >> "$BASH_ENV"

jobs:
  bats-alpine:
    executor: alpine
    steps:
      - checkout
      - run:
          name: Install and run BATS
          command: |
            apk add bats
            mkdir /tmp/bats
            bats --formatter tap --report-formatter junit --output /tmp/bats --timing /root/project
      - store_test_results:
          path: /tmp/bats
  detect-os:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - run:
          name: Check if OS is detected correctly
          command: |
            # Simulate how cURL fetches the script.
            detect_os_script="$(cat "${CIRCLE_WORKING_DIRECTORY/\~/$HOME}"/detect-os.sh)"

            # Evaluate the script and invoke the function.
            eval "$detect_os_script"

            # Helper function to print the result of the test.
            print_success() { printf '%s\n' "$ORB_UTILS_PLATFORM was detected correctly!"; }

            # This test relies on $CIRCLE_JOB to check if the OS is detected correctly.
            # If the executor or job name is changed, this test must be updated or it will fail.
            executor="$(printf '%s' "$CIRCLE_JOB" | sed 's/detect-os-\(.*\)/\1/g')"
            case "$executor" in
              windows) [ "$ORB_UTILS_PLATFORM" = "windows" ] && print_success ;;
              ubuntu) [ "$ORB_UTILS_PLATFORM" = "ubuntu" ] && print_success ;;
              mac) [ "$ORB_UTILS_PLATFORM" = "macos" ] && print_success ;;
              cimg) [ "$ORB_UTILS_PLATFORM" = "ubuntu" ] && print_success ;;
              alpine) [ "$ORB_UTILS_PLATFORM" = "alpine" ] && print_success ;;
              *) { printf '%s\n' "Failed to detect OS." "Expected: $executor" "Actual: $ORB_UTILS_PLATFORM"; exit 1; } ;;
            esac

workflows:
  test:
    jobs:
      - shellcheck/check:
          shell: sh
          filters: *filters
      - bats/run:
          formatter: junit
          path: .
          matrix:
            alias: bats-detect-os
            parameters:
              exec_environment: [cimg, mac]
          requires: [shellcheck/check]
          filters: *filters
      - bats-alpine:
          requires: [shellcheck/check]
          filters: *filters
      - detect-os:
          matrix:
            alias: test-detect-os
            parameters:
              executor: [cimg, mac, alpine, windows, ubuntu]
          requires: [shellcheck/check, bats-detect-os, bats-alpine]
          filters: *filters
      - gh/upload:
          files: "$SCRIPT"
          tag: "$CIRCLE_TAG"
          token: "GHI_TOKEN"
          context: "orb-publisher"
          pre-steps:
            - resolve-release-script
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*_v[0-9]+.[0-9]+.[0-9]+/
          requires: [test-detect-os]

# VS Code Extension Version: 1.4.0
